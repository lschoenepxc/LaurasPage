@page "/auroras"
@*@using LaurasPage.DataAccess*@
@*@inject IForecastData _db*@
@using LaurasPage.DataAccess.Models

@using DataLibrary
@*@using Microsoft.Extensions.Configuration*@
@inject IDataAccess _data
@inject IConfiguration _config

@inject IHttpClientFactory _clientFactory

<h3>Aurora Forecast</h3>
<p>
    Here you can select a location, for which you want to get a forecast. Default location is Hammerfest.
    <MatSelectItem Value="@location" Items="@locationItems" ValueExpression="() => location" ValueChanged="async (LocationType value) => LoadData(value)">
        <ItemTemplate>
            <span>@context?.Name</span>
        </ItemTemplate>
    </MatSelectItem>
</p>
<p>
    Selected location: @(location?.Name) with latitude @(location?.Lat)° and longitude @(location?.Log)°
</p>

@if (string.IsNullOrWhiteSpace(errorString) == false)
{
    <div class="h2">@errorString</div>
}
else if (forecast is null)
{
    <div class="h4">Loading...</div>
}
else
{
    <table class="table table-striped">
        <thead class="thead-dark">
            <tr>
                <th>Bz</th>
                <th>Density</th>
                <th>Speed</th>
                <th>Kp Forecast for the next hour</th>
                <th>Kp Forecast for the next 4 hours</th>
                <th>Current Kp</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td style="background-color: @forecast.Colour.Bz">@forecast.Bz</td>
                <td style="background-color: @forecast.Colour.Density">@forecast.Density</td>
                <td style="background-color: @forecast.Colour.Speed">@forecast.Speed</td>
                <td style="background-color: @forecast.Colour.Kp1Hour">@forecast.Kp1Hour</td>
                <td style="background-color: @forecast.Colour.Kp4Hour">@forecast.Kp4Hour</td>
                <td style="background-color: @forecast.Colour.Kp">@forecast.Kp</td>
            </tr>
        </tbody>
    </table>
    <p>Messages from Auroras.live: </p>
    @foreach (string message in forecast.Message)
    {<span>@message</span>}
    <br />
    <br />
    <p>Colours range from green = no activity to red = lots of activity.</p>
    <br />
    <a href="https://auroraslive.io/#/">Powered by Auroras.live</a>
}

<br/>

    @if (forecastFromDB is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <br/>
        <h4>The last 5 entries from the dbo.forecast table from the AuroraForecast DB</h4>
        <table class="table table-striped">
            <thead class="thead-dark">
                <tr>
                    <th>Bz</th>
                    <th>Density</th>
                    <th>Speed</th>
                    <th>Kp Forecast for the next hour</th>
                    <th>Kp Forecast for the next 4 hours</th>
                    <th>Current Kp</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var forec in forecastFromDB)
                {
                        <tr>
                            <td style="background-color: @forec.colourBz">@forec.Bz</td>
                            <td style="background-color: @forec.colourDensity">@forec.Density</td>
                            <td style="background-color: @forec.colourSpeed">@forec.Speed</td>
                            <td style="background-color: @forec.colourKp1Hour">@forec.Kp1Hour</td>
                            <td style="background-color: @forec.colourKp4Hour">@forec.Kp4Hour</td>
                            <td style="background-color: @forec.colourKp">@forec.Kp</td>
                        </tr>
                }
            </tbody>
        </table>
    }


@code {
    LocationType location = new LocationType("Hammerfest", 23.682, 70.663);

    LocationType[] locationItems = new[]
        {
                new LocationType("", 0,0),
                new LocationType("Lemgo", 8.902, 52.027),
                new LocationType("Detmold", 8.869,51.938),
                new LocationType("Höxter", 9.377,51.777),
                new LocationType("Barntrup", 9.121,51.991),
                new LocationType("Berlin", 13.405,52.52),
                new LocationType("New York", -74.006,40.713),
                new LocationType("Hammerfest", 23.682,70.663),
                new LocationType("Antarktis", -75.251,-0.071),
            };

    class LocationType
    {
        public string Name { get; }
        public double Log { get; }
        public double Lat { get; }

        public LocationType(string name, double log, double lat)
        {
            Name = name;
            Log = log;
            Lat = lat;
        }
    }

    List<ForecastModel> forecastFromDB;

    AuroraForecastModel forecast;
    string errorString;
    PropertyInfo[] properties;

    protected override async Task OnInitializedAsync()
    {
        string sql = "SELECT TOP 5 * FROM forecast ORDER BY id DESC";
        forecastFromDB = await _data.LoadDb<ForecastModel, dynamic>(sql, new { }, _config.GetConnectionString("Default"));

        var client = _clientFactory.CreateClient("aurora");
        //forecastFromDB = await _db.GetForecasts();
        try
        {
            forecast = await client.GetFromJsonAsync<AuroraForecastModel>("?type=ace&lat=70.663&long=23.682&data=all&colour=hex");
            properties = typeof(AuroraColour).GetProperties();
            errorString = null;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            errorString = $"There was an error getting our forecast: {ex.Message}";
        }
    }

    private async Task LoadData(LocationType value)
    {
        location = value;
        var client = _clientFactory.CreateClient("aurora");
        try
        {
            forecast = await client.GetFromJsonAsync<AuroraForecastModel>("?type=ace&lat=" + location.Lat.ToString() + "&long=" + location.Log.ToString() + "&data=all&colour=hex");
            properties = typeof(AuroraColour).GetProperties();
            errorString = null;
            InsertForecast();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            errorString = $"There was an error getting our forecast: {ex.Message}";
        }
    }

    private async Task InsertForecast()
    {
        string sql = @"insert into forecast (Bz, Density, Speed, Kp1Hour, Kp4Hour, Kp, colourBz, colourDensity, colourSpeed, colourKp1Hour, colourKp4Hour, colourKp)
                           values (@Bz, @Density, @Speed, @Kp1Hour, @Kp4Hour, @Kp, @colourBz, @colourDensity, @colourSpeed, @colourKp1Hour, @colourKp4Hour, @colourKp);";

        ForecastModel f = new ForecastModel
        {
            Bz = forecast.Bz,
            Density = forecast.Density,
            Speed = forecast.Speed,
            Kp1Hour = forecast.Kp1Hour,
            Kp4Hour = forecast.Kp4Hour,
            Kp = forecast.Kp,
            colourBz = forecast.Colour.Bz,
            colourDensity = forecast.Colour.Density,
            colourSpeed = forecast.Colour.Speed,
            colourKp1Hour = forecast.Colour.Kp1Hour,
            colourKp4Hour = forecast.Colour.Kp4Hour,
            colourKp = forecast.Colour.Kp
        };
        await _data.SaveDb(sql, f, _config.GetConnectionString("Default"));
        forecastFromDB.Add(f);
    }
}

